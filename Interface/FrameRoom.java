/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Liang Zhong t00224182
 */
import java.awt.Color;
import java.awt.Image;
import java.util.*;
import java.net.URL;
import javax.swing.ImageIcon;

public class FrameRoom extends javax.swing.JFrame {
     
   
    
   
    
    /**
     * Constructor to creates new FrameRoom Frame Object
     */
    public FrameRoom() {
        initComponents();
        addFurniture("please make a selection");   //at start(when the main FrameRoom object is created), these items are added to the photoArray for select event of jComboBox
        addFurniture("Libby Table");
        addFurniture("Red Chair");
        addFurniture("Verona Table");
        addFurniture("Living Room");
        addFurniture("Movie Room");
        addFurniture("Sofa Black");
        addFurniture("Black Chair");
        addFurniture("Dresser");
    }
    
    /**Class variable: an ArrayList(hold Photos objects) that holds Photos Objects.  */
    ArrayList <Photos> photoArray = new ArrayList<>();
    
    /**Class variable: an Array(hold String name) which matches the photoArray arrayList.  */
    String[]  nameArray; 
    
    /**method to populate jComboBox with a new furniture item. jComboBox call its method: addItem(String). */
    private void addFurniture(String furnitureNameX){
        select_Furniture_jComboBox.addItem(furnitureNameX);
    }
    
    /**Method to add the items in photoArray(photos object arrayList) into nameArray(String array), so they match each other.  */
    private void renewNameArray ()
    {      
           int photoArraySize = photoArray.size();
           nameArray = new String[photoArraySize];   //initialize nameArray by the same size of photoArray
           for (int i=0; i<photoArraySize; i++)
           {
               nameArray[i]=photoArray.get(i).getName();     //assign photoArray(arrayList) item's string name to nameArray
           }    
    }
    
    /**Method to extract every photo object in arrayList photoArray, and display them on the jPanel.
    * In the JPanel where the images are to be drawn, capture the Graphics object for this JPanel object by overriding
     * the paintComponent method using an Anonymous Inner Class in the grey zone codes. Pass this Graphics object (g) to 
     * this JFrame class calls redraw(Graphics g) in AnonInnerClass when new jPanel is created.   */
    public void redraw(java.awt.Graphics g){
      for(int i=0; i<photoArray.size(); i++ )
      {
            photoArray.get(i).displayPhoto(g);
      }
    
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        flip_vertically_JButton = new javax.swing.JButton();
        Canvas_jPanel = new javax.swing.JPanel(){
            public void paintComponent(java.awt.Graphics g)
            {
                super.paintComponent(g);

                redraw(g);
            }
        };
        flip_horizontally_JButton = new javax.swing.JButton();
        reduce_JButton = new javax.swing.JButton();
        plus_JButton = new javax.swing.JButton();
        cancel_JButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        selected_jList = new javax.swing.JList<>();
        selected_jLabel = new javax.swing.JLabel();
        scale_jSlider = new javax.swing.JSlider();
        stretchX_jSlider = new javax.swing.JSlider();
        stretchY_jSlider = new javax.swing.JSlider();
        scale_jLabel = new javax.swing.JLabel();
        stretchX_jLabel = new javax.swing.JLabel();
        stretchY_jLabel = new javax.swing.JLabel();
        select_Furniture_jComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 204, 0));

        flip_vertically_JButton.setText("flip vertically");
        flip_vertically_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                flip_vertically_JButtonMousePressed(evt);
            }
        });

        Canvas_jPanel.setBackground(new java.awt.Color(204, 255, 255));
        Canvas_jPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                Canvas_jPanelMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout Canvas_jPanelLayout = new javax.swing.GroupLayout(Canvas_jPanel);
        Canvas_jPanel.setLayout(Canvas_jPanelLayout);
        Canvas_jPanelLayout.setHorizontalGroup(
            Canvas_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        Canvas_jPanelLayout.setVerticalGroup(
            Canvas_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 752, Short.MAX_VALUE)
        );

        flip_horizontally_JButton.setText("flip horizontally");
        flip_horizontally_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                flip_horizontally_JButtonMousePressed(evt);
            }
        });

        reduce_JButton.setText("-");
        reduce_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                reduce_JButtonMousePressed(evt);
            }
        });

        plus_JButton.setText("+");
        plus_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                plus_JButtonMousePressed(evt);
            }
        });

        cancel_JButton.setText("X");
        cancel_JButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cancel_JButtonMousePressed(evt);
            }
        });

        jScrollPane1.setViewportView(selected_jList);

        selected_jLabel.setBackground(new java.awt.Color(255, 153, 0));
        selected_jLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        selected_jLabel.setText("SELECTED");
        selected_jLabel.setOpaque(true);

        scale_jSlider.setToolTipText("");
        scale_jSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                scale_jSliderStateChanged(evt);
            }
        });

        stretchX_jSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                stretchX_jSliderStateChanged(evt);
            }
        });

        stretchY_jSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                stretchY_jSliderStateChanged(evt);
            }
        });

        scale_jLabel.setText("Scale:");

        stretchX_jLabel.setText("Stretch X:");

        stretchY_jLabel.setText("Stretch Y:");

        select_Furniture_jComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                select_Furniture_jComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scale_jLabel)
                .addGap(18, 18, 18)
                .addComponent(scale_jSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(stretchX_jLabel)
                .addGap(15, 15, 15)
                .addComponent(stretchX_jSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(stretchY_jLabel)
                .addGap(15, 15, 15)
                .addComponent(stretchY_jSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(select_Furniture_jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(reduce_JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancel_JButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(plus_JButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(flip_horizontally_JButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(flip_vertically_JButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(selected_jLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addComponent(Canvas_jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(stretchX_jSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stretchY_jSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scale_jLabel)
                    .addComponent(scale_jSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stretchX_jLabel)
                    .addComponent(stretchY_jLabel)
                    .addComponent(select_Furniture_jComboBox))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(flip_horizontally_JButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(flip_vertically_JButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(reduce_JButton)
                            .addComponent(plus_JButton)
                            .addComponent(cancel_JButton))
                        .addGap(5, 5, 5)
                        .addComponent(selected_jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(Canvas_jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        scale_jSlider.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /** Method that at each time an item is selected in the jComboBox, it creates an object of type Photo, adds this Photos object to the ArrayList called photoArray.
     * then renewNameArray to make the elements in the nameArray is the exact same as the elements in the photoArray arrayList again. 
     * then pass in nameArray as jList's parameter to display the elements in the nameArray to the jList.
     * if condition is used to avoid to add the first item in the jComboBox to the photoArray arrayList.*/
    private void select_Furniture_jComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_select_Furniture_jComboBoxActionPerformed
       
         if(select_Furniture_jComboBox.getSelectedIndex()!=0)             //ignore first item, not to put it into the selected list when this select event happen
         {
         String furnitureX = (String) select_Furniture_jComboBox.getSelectedItem();  //jComboBox select a furniture item object, cast this object to its String name
        
         Photos picX = new Photos(furnitureX);       //create a Photos object with passed in furniture name String 
                                                          // System.out.println(picX.getName         
         photoArray.add(picX);        //add the newly created Photos object into photoArray, starting from index 0 to accecpt the valid furniture item
         
         renewNameArray();    //transfer photoArray content into nameArray
         selected_jList.setListData(nameArray);  //display/pass in as parameter the content in nameArray to jList, so they have the same content
         selected_jList.setSelectedIndex(nameArray.length-1);  //Highlight the last item of the jList using the setSelectedIndex() method.
         
         Canvas_jPanel.repaint();       //renew the contents on jPanel to reflect the new pictures and their orders
         }
    }//GEN-LAST:event_select_Furniture_jComboBoxActionPerformed

    /**Method when the "X" button is pressed, the item currently highlighted in the JList is removed/deleted from the ArrayList. and the jList is updated to also show the item is removed   */
    private void cancel_JButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancel_JButtonMousePressed
        
        int currentIndex = selected_jList.getSelectedIndex();     //get index number for the selected item, first item has index=0
                                      //System.out.println(currentIndex);
        photoArray.remove(currentIndex);     //photoArray item index matches the above selected item's index in jList
        renewNameArray();                      //NameArray mirror photoArray
        selected_jList.setListData(nameArray);   //display/pass in the items in nameArray to jList
        selected_jList.setSelectedIndex(nameArray.length-1);   //highlight the last item in jList(same index as the last item in nameArray
        
        Canvas_jPanel.repaint();    //renew the contents on jPanel to reflect the new pictures and their orders
    }//GEN-LAST:event_cancel_JButtonMousePressed

    /**Method that when - button is pressed to move the orders of the selected item.   */
    private void reduce_JButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reduce_JButtonMousePressed
        int currentIndex = selected_jList.getSelectedIndex();        //get the index number in photoArray arrayList of the selected item 
                                              //System.out.println(currentIndex);
        int swapToIndex = currentIndex - 1;               //need to move this object to higher position in the arrayList, means, its new index=current index -1
        
        if(currentIndex>0)          //only if currentIndex >0, such as 1,2, 3, ... the item can be move up(index-1), means index can not less than 0
        {  Photos tempPicX = photoArray.get(swapToIndex);   //create temp variable x to save the Photos object at swapToIndex postion 
           photoArray.set(swapToIndex, photoArray.get(currentIndex));  //replace swapToIndex positon with the Photos object at currentIndex postion
           photoArray.set(currentIndex, tempPicX);
        
           renewNameArray();                           //NameArray mirror photoArray
           selected_jList.setListData(nameArray);      //display/pass in the items in nameArray to jList
           selected_jList.setSelectedIndex(nameArray.length-1);   //highlight the last item in jList(same index as the last item in nameArray
           
           Canvas_jPanel.repaint();       //renew the contents on jPanel to reflect the new pictures and their orders
        }
    }//GEN-LAST:event_reduce_JButtonMousePressed

    /**Method that when + button is pressed to move the orders of the selected item.  */
    private void plus_JButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_plus_JButtonMousePressed
        int currentIndex = selected_jList.getSelectedIndex();  //get the index number of(photoArray) for the selected item in jList, because they mirror to each other
        int swapToIndex = currentIndex + 1;   
        
        if(currentIndex != photoArray.size()-1)     //can not move down the last item in the photoArray because it will go out of boundary, so the item's index=last-1 can be increment +1
        { Photos tempPicX = photoArray.get(swapToIndex);   //create temp variable x to save the Photos object at swapToIndex postion 
        photoArray.set(swapToIndex, photoArray.get(currentIndex));  //replace swapToIndex positon with the Photos object at currentIndex postion
        photoArray.set(currentIndex, tempPicX);
        
        renewNameArray();                           //NameArray mirror photoArray
        selected_jList.setListData(nameArray);      //display/pass in the items in nameArray to jList
        selected_jList.setSelectedIndex(nameArray.length-1);   //highlight the last item in jList(same index as the last item in nameArray
        Canvas_jPanel.repaint();       //renew the contents on jPanel to reflect the new pictures and their orders
        }
    }//GEN-LAST:event_plus_JButtonMousePressed

    /**Hook Method that in the JPanel, create an event listener for the mouseMotion -> mouseDragged event.  */
    private void Canvas_jPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Canvas_jPanelMouseDragged
        Photos pic= photoArray.get(selected_jList.getSelectedIndex());  //get the photo object in the ArrayList based on the currently highlighted item in the jList.
        pic.setImgX(evt.getX());   //assign evt(mouth position of x) to Photos object setImgX()
        pic.setImgY(evt.getY());
        Canvas_jPanel.repaint();  //renew the contents on jPanel to reflect the selected picture with new position of mouth location
    }//GEN-LAST:event_Canvas_jPanelMouseDragged

    /**Method to create the scaling code for the JSliders that scale the highlighted image proportional, stretch-width.  */
    private void stretchX_jSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_stretchX_jSliderStateChanged
        Photos pic = photoArray.get(selected_jList.getSelectedIndex());    //get the Photos object in PhotoArray reflect the current selected item in jList
        double sliderValue = (double)stretchX_jSlider.getValue()/50;    //.getValue() return int, must be casted to double
        pic.setScaleX(sliderValue);                  //the Photos object's scaleX variable is reset by slider's value
        Canvas_jPanel.repaint();                      //make change on jPanel
    }//GEN-LAST:event_stretchX_jSliderStateChanged

    /**Method to create the scaling code for the JSliders that scale the highlighted image proportional, stretch-height.  */
    private void stretchY_jSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_stretchY_jSliderStateChanged
        Photos pic = photoArray.get(selected_jList.getSelectedIndex());    //get the Photos object in PhotoArray reflect the current selected item in jList
        double sliderValue = (double)stretchY_jSlider.getValue()/50;    //.getValue() return int, must be casted to double
        pic.setScaleY(sliderValue);                  //the Photos object's scaleY variable is reset by slider's value
        Canvas_jPanel.repaint();                      //make change on jPanel
    }//GEN-LAST:event_stretchY_jSliderStateChanged

    /**Method to create the scaling code for the JSliders that scale the highlighted image proportional, stretch-width and height  */
    private void scale_jSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_scale_jSliderStateChanged
        Photos pic = photoArray.get(selected_jList.getSelectedIndex());    //get the Photos object in PhotoArray reflect the current selected item in jList
        double sliderValue = (double)scale_jSlider.getValue()/50;    //.getValue() return int, must be casted to double
        pic.setScaleX(sliderValue);
        pic.setScaleY(sliderValue);     //the Photos object's scaleY variable is reset by slider's value
                         
        Canvas_jPanel.repaint();                      //make change on jPanel
    }//GEN-LAST:event_scale_jSliderStateChanged

    private void flip_horizontally_JButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_flip_horizontally_JButtonMousePressed
        Photos pic = photoArray.get(selected_jList.getSelectedIndex());
        double flip = -1*pic.getScaleX();
        pic.setScaleX(flip);
        
        Canvas_jPanel.repaint();                      //make change on jPanel
    }//GEN-LAST:event_flip_horizontally_JButtonMousePressed

    private void flip_vertically_JButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_flip_vertically_JButtonMousePressed
        Photos pic = photoArray.get(selected_jList.getSelectedIndex());
        double flip = -1*pic.getScaleY();
        pic.setScaleY(flip);
        
        Canvas_jPanel.repaint();                      //make change on jPanel
    }//GEN-LAST:event_flip_vertically_JButtonMousePressed

    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        

        /* Create and display the form: at start(when the main FrameRoom object is created) */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameRoom().setVisible(true);       //call constructor of FrameRoom() here
            }
        });
        
        
        /**below is my own codes   */
       
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Canvas_jPanel;
    private javax.swing.JButton cancel_JButton;
    private javax.swing.JButton flip_horizontally_JButton;
    private javax.swing.JButton flip_vertically_JButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton plus_JButton;
    private javax.swing.JButton reduce_JButton;
    private javax.swing.JLabel scale_jLabel;
    private javax.swing.JSlider scale_jSlider;
    private javax.swing.JComboBox<String> select_Furniture_jComboBox;
    private javax.swing.JLabel selected_jLabel;
    private javax.swing.JList<String> selected_jList;
    private javax.swing.JLabel stretchX_jLabel;
    private javax.swing.JSlider stretchX_jSlider;
    private javax.swing.JLabel stretchY_jLabel;
    private javax.swing.JSlider stretchY_jSlider;
    // End of variables declaration//GEN-END:variables
}
